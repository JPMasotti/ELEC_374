`timescale 1ns / 1ps

module ld_tb();

    // Control signals
    reg clock, clear, read;
    reg R0out, R1out, R2out, R3out, R4out, R5out, R6out, R7out;
    reg R8out, R9out, R10out, R11out, R12out, R13out, R14out, R15out;
    reg R0in, R1in, R2in, R3in, R4in, R5in, R6in, R7in;
    reg R8in, R9in, R10in, R11in, R12in, R13in, R14in, R15in;
    reg HIin, HIout, LOin, LOout, MDRout, MARout, PCout;
    reg PCin, IRin, IRout, Zin, RZout, Zhighout, Zlowout, Yin, MARin, MDRin, IncPC;
    reg BAout, Grb, Gra, Cout, ADD;
    reg [7:0] ALU_control;
    reg [31:0] Mdatain;
    reg [4:0] shift_count_in;
    
    wire [31:0] PCincremented, PCreg, BusMuxOut;
    
    // Instantiate DataPath Module
    DataPath DUT (
        .clock(clock), .clear(clear), .read(read),
        .R0out(R0out), .R1out(R1out), .R2out(R2out), .R3out(R3out), .R4out(R4out),
        .R5out(R5out), .R6out(R6out), .R7out(R7out), .R8out(R8out), .R9out(R9out),
        .R10out(R10out), .R11out(R11out), .R12out(R12out), .R13out(R13out),
        .R14out(R14out), .R15out(R15out),
        .R0in(R0in), .R1in(R1in), .R2in(R2in), .R3in(R3in), .R4in(R4in), .R5in(R5in),
        .R6in(R6in), .R7in(R7in), .R8in(R8in), .R9in(R9in), .R10in(R10in), .R11in(R11in),
        .R12in(R12in), .R13in(R13in), .R14in(R14in), .R15in(R15in),
        .HIin(HIin), .HIout(HIout), .LOin(LOin), .LOout(LOout), .MDRout(MDRout),
        .MARout(MARout), .PCout(PCout), .PCin(PCin), .IRin(IRin), .IRout(IRout),
        .Zin(Zin), .RZout(RZout), .Zhighout(Zhighout), .Zlowout(Zlowout), .Yin(Yin),
        .MARin(MARin), .MDRin(MDRin), .IncPC(IncPC), .BAout(BAout), .ALU_control(ALU_control),
        .Mdatain(Mdatain), .shift_count_in(shift_count_in),
        .PCincremented(PCincremented), .PCreg(PCreg), .BusMuxOut(BusMuxOut)
    );

    // Clock Generation
    always #5 clock = ~clock;  // 10ns clock period

    // Task to Execute LD Instruction
    task LD;
        begin
            // T0: PC -> MAR, Increment PC, Z <- PC
            PCout = 1; MARin = 1; IncPC = 1; Zin = 1;
            #10 PCout = 0; MARin = 0; IncPC = 0; Zin = 0;

            // T1: Zlow -> PC, Read Memory, Mdatain -> MDR
            Zlowout = 1; PCin = 1; read = 1;
            Mdatain = 32'h12345678;  // Simulated memory data
            #10 Zlowout = 0; PCin = 0;

            // T2: MDR -> IR
            MDRout = 1; IRin = 1;
            #10 MDRout = 0; IRin = 0;

            // T3: Register B (Grb) -> Y
            Grb = 1; BAout = 1; Yin = 1;
            #10 Grb = 0; BAout = 0; Yin = 0;

            // T4: Compute Address (Cout + ADD -> Z)
            Cout = 1; ADD = 1; Zin = 1;
            #10 Cout = 0; ADD = 0; Zin = 0;

            // T5: Zlow -> MAR
            Zlowout = 1; MARin = 1;
            #10 Zlowout = 0; MARin = 0;

            // T6: Read Memory, Mdatain -> MDR
            read = 1;
            Mdatain = 32'hA5A5A5A5;  // Simulated memory data
            #10 read = 0;

            // T7: MDR -> Register (Gra)
            MDRout = 1; Gra = 1; Rin = 1;
            #10 MDRout = 0; Gra = 0; Rin = 0;
        end
    endtask

    // Testbench Execution
    initial begin
        // Initialize signals
        clock = 0; clear = 1; read = 0;
        R0out = 0; R1out = 0; R2out = 0; R3out = 0; R4out = 0;
        R5out = 0; R6out = 0; R7out = 0; R8out = 0; R9out = 0;
        R10out = 0; R11out = 0; R12out = 0; R13out = 0; R14out = 0; R15out = 0;
        R0in = 0; R1in = 0; R2in = 0; R3in = 0; R4in = 0; R5in = 0;
        R6in = 0; R7in = 0; R8in = 0; R9in = 0; R10in = 0; R11in = 0;
        R12in = 0; R13in = 0; R14in = 0; R15in = 0;
        HIin = 0; HIout = 0; LOin = 0; LOout = 0; MDRout = 0;
        MARout = 0; PCout = 0; PCin = 0; IRin = 0; IRout = 0;
        Zin = 0; RZout = 0; Zhighout = 0; Zlowout = 0; Yin = 0;
        MARin = 0; MDRin = 0; IncPC = 0; BAout = 0; Grb = 0; Gra = 0;
        Cout = 0; ADD = 0;
        ALU_control = 0;
        shift_count_in = 0;
        Mdatain = 0;

        #20 clear = 0;  // Release reset

        // Execute LD instruction
        $display("Starting LD Instruction Execution...");
        LD();

        // Verification
        #10 if (BusMuxOut == 32'hA5A5A5A5) 
                $display("Test Passed: Register loaded correctly.");
            else
                $display("Test Failed: Expected 0xA5A5A5A5, got %h", BusMuxOut);

        #10 $stop; // End simulation
    end
endmodule
